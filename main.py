import streamlit as st
import numpy as np
import pandas as pd
import altair as alt
from io import StringIO


def site_info():
    with st.expander('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–π—Ç–µ'):
        st.markdown('**–û —á–µ–º —ç—Ç–æ—Ç —Å–∞–π—Ç?**')
        st.info('–û–± –¥–æ—Ö–æ–¥–∞—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ –∫–∏–Ω–æ')
        st.markdown('**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º —Å–∞–π—Ç–æ–º?**')
        st.warning(
            '–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, '
            '1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∂–∞–Ω—Ä—ã –≤ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–º—Å—è —Å–ø–∏—Å–∫–µ.'
            '2. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥—ã –≤ –≤–∏–¥–∂–µ—Ç–µ-–ø–æ–ª–∑—É–Ω–∫–µ.')


def load_data(file):
    try:
        if file.name.endswith('.csv'):
            return pd.read_csv(file), '.csv'
        elif file.name.endswith('.json'):
            return pd.read_json(file), '.json'
    except Exception as e:
        print(e)
        return None, None


def genre_selection(df):
    genres_list = df.genre.unique()
    genres_selection = st.multiselect('–í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä—ã', genres_list,
                                      ['–ë–æ–µ–≤–∏–∫', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '–í–æ–µ–Ω–Ω—ã–µ', '–ö–æ–º–µ–¥–∏—è', '–î—Ä–∞–º–∞', '–•–æ—Ä—Ä–æ—Ä'])
    return genres_selection


def year_selection(df):
    year_list = df.year.unique()
    year_selection = st.slider('–í—ã–±—Ä–∞—Ç—å –≥–æ–¥—ã', 1986, 2006, (2000, 2016))
    year_selection_list = list(np.arange(year_selection[0], year_selection[1] + 1))
    return year_selection_list


def plot_chart(df):
    reshaped_df = df.pivot_table(index='year', columns='genre', values='gross', aggfunc='sum', fill_value=0)
    reshaped_df = reshaped_df.sort_values(by='year', ascending=False)
    df_chart = pd.melt(reshaped_df.reset_index(), id_vars='year', var_name='–ñ–∞–Ω—Ä—ã', value_name='gross')

    chart = alt.Chart(df_chart).mark_line().encode(
        x=alt.X('year:N', title='–ì–æ–¥'),
        y=alt.Y('gross:Q', title='–î–æ—Ö–æ–¥ ($)'),
        color='–ñ–∞–Ω—Ä—ã:N'
    ).properties(height=320)
    st.altair_chart(chart, use_container_width=True)


def data_info(df):
    column_1, column_2 = st.columns(2)
    st.write("## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
    with column_1:
        st.write("–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        st.write(df.head())
        st.write("–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        st.write(df)
    with column_2:
        st.write("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.write(df.describe())
        st.write("–¢–∞–±–ª–∏—Ü–∞")
        buffer = StringIO()
        df.info(buf=buffer)
        st.text(buffer.getvalue())


def main():
    st.set_page_config(page_title='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö', page_icon='üìä')
    st.title('üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö')

    site_info()

    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", type=['csv', 'json'])
    if uploaded_file is not None:
        df, file_type = load_data(uploaded_file)
        data_info_button = st.button("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")
        redact_info = st.button("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        if data_info_button:
            data_info(df)
        elif redact_info:
            edit_data(df)
        else:
            genres_selection = genre_selection(df)
            year_selection_list = year_selection(df)
            df_selection = df[df.genre.isin(genres_selection) & df['year'].isin(year_selection_list)]
            plot_chart(df_selection)


def edit_data(df):
    column_3, column_4 = st.columns(2)
    st.write("## –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    with column_3:
        st.write("–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        st.write(df)
    with column_4:
        st.write("–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:")
        disabled_columns = ['year']
        edited_df = st.data_editor(df, height=212, use_container_width=True,
                                   disabled=disabled_columns,
                                   num_rows="dynamic")

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
        df.update(edited_df)
        st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")


if __name__ == "__main__":
    main()
